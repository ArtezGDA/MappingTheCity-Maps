import json

size(1200, 512)
background(1)

def mapValue(value, fromMin, fromMax, toMin, toMax):
	# Figure out how 'wide' each range is
	fromSpan = fromMax - fromMin
	toSpan = toMax - toMin
	
	# Convert the from range into a 0-1 range (float)
	valueScaled = float(value - fromMin) / float(fromSpan)
	
	# Convert the 0-1 range into a value in the to range.
	return toMin + (valueScaled * toSpan)

def xOfDot(lon):
	return mapValue(lon, -180, 180, 0, WIDTH)

def yOfDot(lat):
	return mapValue(lat, -90, 90, HEIGHT, 0)

with open("arnhemtree.json", 'r') as inputFile:
	data = json.load(inputFile)

# To prevent infinite recursion, keep a list of already drawn cities
drawnCities = []

dotDiameter = 2.0
dotOffset = dotDiameter / 2.0

def drawCityAndSisters(cityName, depth = 0):
	# Only continue if we didn't draw this city before
	if not cityName in drawnCities:
		#
		# Add the name to the list of cities
		drawnCities.append(cityName)
		#
		# Continue drawing the city
		city = data[cityName]
		if city.has_key('coordinates'):
			latLon = city['coordinates']
			lat = float(latLon[0])
			lon = float(latLon[1])
			# convert lat / lon
			x = xOfDot(lon)
			y = yOfDot(lat)
			if city.has_key('partners'):
				partners = city['partners']
				for sisterCity in partners:
					# Get the name of the sister city
					sisterName = sisterCity['city']
					print sisterName
					# Find the coordinates of this city
					# Get the city
					sister = data[sisterName]
					if sister.has_key('coordinates'):
						latLon = sister['coordinates']
						latSister = float(latLon[0])
						lonSister = float(latLon[1])
						# convert lat / lon
						x2 = xOfDot(lonSister)
						y2 = yOfDot(latSister)
						# draw the line
						stroke(0, 0, 0, 1.0 - (depth * 0.05))
						line(x, y, x2, y2)
						#
						if depth < 20:
							# Repeat recursively with the sister city
							drawCityAndSisters(sisterName, depth + 1)
			oval(x - dotOffset, y - dotOffset, dotDiameter, dotDiameter)
			# text(cityName, x, y)
			
# Start the tree from Arnhem
drawCityAndSisters("Arnhem")